{"componentChunkName":"component---src-templates-single-template-tsx","path":"/content/vocabulary/","webpackCompilationHash":"7c23fc8042f3b7565e04","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/content/vocabulary/\",\n  \"title\": \"Vocabulary\",\n  \"tags\": [\"markdown\", \"vocabulary\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Term\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Definition\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Pano or Sweep\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Short for panorama. A spot in the Matterport Space where a user can stand and look around. Also called a \\u2018sweep\\u2019 as in a full Matterport camera rotation.\", mdx(\"br\", null), mdx(\"br\", null), \"This includes 3D scan locations (panos aligned to each other) and 360\\xBA Views (unaligned panos).\", mdx(\"br\", null), mdx(\"br\", null), \"A pano is the 2D visual data. This is different from 3D mesh data that the user sees in Dollhouse and Floorplan View.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"UUID\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Unique Universal ID. This is used to identify a single pano among the many panos in a Matterport Space.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Position\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Absolute position (X, Y, and Z coordinates) of the pano within the Matterport Space. \", mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"concepts.md\"\n  }), \"Learn more\"), \" about the coordinate conventions.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Transition\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Transitions are what the user sees when they move from one pano to another. Transitions can be: \", mdx(\"br\", null), \"1) \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"Fly-through\"), \" \\u2014 Flies from pano to pano inside the 3D Space. \", mdx(\"br\", null), \"2) \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"Fade\"), \" \\u2014 Fades to black in between panos. This gives a more \\u201Cslideshow\\u201D type of feeling. \", mdx(\"br\", null), \"3) \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"Instant\"), \" \\u2014 Immediately switches from one pano to another without any transition.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Mode\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The user\\u2019s current view in 3D Showcase. It can be one of five possible modes:\", mdx(\"br\", null), mdx(\"br\", null), \"1) Inside View (aligned pano)\", mdx(\"br\", null), \" 2) 360\\xBA View or Outside View (unaligned pano)\", mdx(\"br\", null), \" 3) Dollhouse View\", mdx(\"br\", null), \" 4) Floorplan View\", mdx(\"br\", null), \" 5) Transitioning between different modes.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":null,"path":"/content/vocabulary/","title":"Vocabulary"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}